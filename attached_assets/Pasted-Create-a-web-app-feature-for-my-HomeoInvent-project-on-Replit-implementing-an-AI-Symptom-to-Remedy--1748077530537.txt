Create a web app feature for my HomeoInvent project on Replit, implementing an AI Symptom-to-Remedy Matcher with Confidence Scoring and Cloud-Based Inventory Sharing. The app is a homeopathic medicine inventory manager, hosted via a tunnel (port 5173, likely Vite/React). Use JavaScript with React for the frontend and Express for the backend, or Python/Flask if more suitable. Leave API key placeholders for security (I’ll add them manually in .env after deployment or upgrading to Replit Core). Follow these requirements:

1. **Symptom-to-Remedy Matcher**:
   - Users input symptoms (e.g., “sore throat, fever”) via a text field.
   - Suggest homeopathic remedies with potency, dosage, and confidence scores (e.g., “Belladonna 30C, 80% match, Dosage: 2 pellets 4x/day”) based on a remedy database (JSON or cloud) referencing Boericke’s Materia Medica.
   - Prioritize remedies in the user’s inventory, showing a “View Details” button and storage location (e.g., “Shelf A”) for in-stock remedies.
   - Include non-inventory remedies with a note (e.g., “Aconite 30C, Not in inventory”).
   - Use keyword matching for symptom-remedy pairing, with a placeholder for an AI API (e.g., xAI Grok API at https://api.x.ai/v1/analyze) to enhance matching.
   - Store results in a cloud database (e.g., Firebase) with a placeholder for the API key.

2. **Cloud-Based Inventory Sharing**:
   - Allow multiple users to share an inventory via a cloud database (e.g., Firebase).
   - When one user adds or deletes a remedy (e.g., { name: "Arnica", potency: "30C", quantity: 50, storageLocation: "Shelf A" }), sync changes in real-time to other connected users.
   - Include a UI to add/delete remedies, showing updates instantly.

3. **Technical Details**:
   - File Structure: Create `src/components/SymptomMatcher.js` and `Inventory.js` for frontend, `server/index.js` for backend (Express), `server/remedies.json` for static remedy data, and `.env` for API keys.
   - UI/UX: Use a calming palette (#E6F0FA background, #4CAF50 buttons) with glowing button effects (CSS box-shadow, transitions).
   - Backend: Create a POST endpoint `/api/match-remedies` for symptom matching and `/api/update-inventory` for inventory updates.
   - APIs: Use placeholders for Firebase (cloud storage) and xAI Grok API (AI matching). Example: `process.env.FIREBASE_API_KEY` and `process.env.AI_API_KEY`.
   - Dependencies: Include `express`, `cors`, `dotenv`, `firebase-admin` (JS) or `flask`, `python-dotenv`, `firebase-admin` (Python).
   - Ensure robust input validation and error handling.

4. **Security**:
   - Use `.env` for API keys (e.g., `FIREBASE_API_KEY=YOUR_FIREBASE_API_KEY_HERE`, `AI_API_KEY=YOUR_AI_API_KEY_HERE`).
   - Instruct where to add keys manually in `.env` or Replit Secrets after deployment.

5. **Output**:
   - Generate all necessary files with code.
   - Provide a README with setup instructions (e.g., `npm install`, `npm start`).
   - Include comments explaining API key placeholders and cloud integration.
   - Ensure compatibility with Replit’s deployment and tunnel (port 5173).

Make the code modular, professor-friendly (unique and innovative), and aligned with a homeopathic focus. Optionally, suggest a Chart.js bar chart for remedy confidence scores, but don’t generate unless requested. If Python/Flask is better, adjust accordingly.